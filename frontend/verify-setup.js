#!/usr/bin/env node

/**
 * Script de v√©rification de la configuration des coop√©ratives
 * Ex√©cutez ce script pour v√©rifier que tout est en place
 */

const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification de la configuration des coop√©ratives...\n');

const requiredFiles = [
    'src/components/CooperativeManagement.jsx',
    'src/components/CooperativeList.jsx',
    'src/components/CooperativeForm.jsx',
    'src/components/QuickCooperativeTest.jsx',
    'src/components/IndexedDBTest.jsx',
    'src/services/CooperativeStorageService.js',
    'README_COOPERATIVES_FIX.md',
    'INTEGRATION_TEST.md'
];

const requiredImports = [
    'cooperativeStorageService',
    'useState',
    'useEffect',
    'React'
];

let allGood = true;

// V√©rifier l'existence des fichiers
console.log('üìÅ V√©rification des fichiers requis...');
requiredFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    if (fs.existsSync(filePath)) {
        console.log(`  ‚úÖ ${file}`);
    } else {
        console.log(`  ‚ùå ${file} - MANQUANT`);
        allGood = false;
    }
});

// V√©rifier le contenu des composants principaux
console.log('\nüîß V√©rification du contenu des composants...');

try {
    // V√©rifier CooperativeManagement.jsx
    const managementPath = path.join(process.cwd(), 'src/components/CooperativeManagement.jsx');
    if (fs.existsSync(managementPath)) {
        const content = fs.readFileSync(managementPath, 'utf8');
        
        if (content.includes('cooperativeStorageService')) {
            console.log('  ‚úÖ CooperativeManagement.jsx - Service int√©gr√©');
        } else {
            console.log('  ‚ùå CooperativeManagement.jsx - Service non int√©gr√©');
            allGood = false;
        }
        
        if (content.includes('loadCooperatives()')) {
            console.log('  ‚úÖ CooperativeManagement.jsx - Fonction de chargement pr√©sente');
        } else {
            console.log('  ‚ùå CooperativeManagement.jsx - Fonction de chargement manquante');
            allGood = false;
        }
    }
    
    // V√©rifier CooperativeStorageService.js
    const servicePath = path.join(process.cwd(), 'src/services/CooperativeStorageService.js');
    if (fs.existsSync(servicePath)) {
        const content = fs.readFileSync(servicePath, 'utf8');
        
        if (content.includes('class CooperativeStorageService')) {
            console.log('  ‚úÖ CooperativeStorageService.js - Classe d√©finie');
        } else {
            console.log('  ‚ùå CooperativeStorageService.js - Classe manquante');
            allGood = false;
        }
        
        if (content.includes('saveCooperative')) {
            console.log('  ‚úÖ CooperativeStorageService.js - M√©thode saveCooperative pr√©sente');
        } else {
            console.log('  ‚ùå CooperativeStorageService.js - M√©thode saveCooperative manquante');
            allGood = false;
        }
    }
    
} catch (error) {
    console.log(`  ‚ùå Erreur lors de la v√©rification: ${error.message}`);
    allGood = false;
}

// V√©rifier la structure des dossiers
console.log('\nüìÇ V√©rification de la structure des dossiers...');
const requiredDirs = [
    'src/components',
    'src/services'
];

requiredDirs.forEach(dir => {
    const dirPath = path.join(process.cwd(), dir);
    if (fs.existsSync(dirPath) && fs.statSync(dirPath).isDirectory()) {
        console.log(`  ‚úÖ ${dir}/`);
    } else {
        console.log(`  ‚ùå ${dir}/ - MANQUANT`);
        allGood = false;
    }
});

// R√©sum√©
console.log('\nüìä R√âSUM√â DE LA V√âRIFICATION');
console.log('=' .repeat(50));

if (allGood) {
    console.log('üéâ Tous les composants sont correctement configur√©s !');
    console.log('\nüöÄ Prochaines √©tapes :');
    console.log('1. Int√©grer QuickCooperativeTest dans ton application');
    console.log('2. Tester la cr√©ation d\'une coop√©rative');
    console.log('3. V√©rifier la persistance apr√®s rechargement');
    console.log('4. Consulter INTEGRATION_TEST.md pour plus de d√©tails');
} else {
    console.log('‚ö†Ô∏è  Certains composants n√©cessitent une attention particuli√®re');
    console.log('\nüîß Actions recommand√©es :');
    console.log('1. V√©rifier que tous les fichiers sont pr√©sents');
    console.log('2. S\'assurer que les imports sont corrects');
    console.log('3. Relancer la v√©rification apr√®s correction');
}

console.log('\nüìö Documentation disponible :');
console.log('- README_COOPERATIVES_FIX.md - Explication de la correction');
console.log('- INTEGRATION_TEST.md - Guide de test et int√©gration');

console.log('\n' + '=' .repeat(50));

// Code de sortie
process.exit(allGood ? 0 : 1);
